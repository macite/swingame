//
//  SGSDL2Graphics3DTypes.h
//  sgsdl2
//
//  Created by James Ferguson on 14/03/2015.
//  Copyright (c) 2015 Andrew Cain. All rights reserved.
//

#ifndef sgsdl2_SGSDL2Graphics3DTypes_h
#define sgsdl2_SGSDL2Graphics3DTypes_h

#include "sgInterfaces.h"
#include "Vector3f.h"
#include "Matrix4f.h"
#include <vector>

using namespace std;

// Constants used by the shader property of sgsdl2_geometry
// Shader has not been selected, one of the defaults will automatically be selected each frame
#define SHADER_UNSELECTED 0
// The geometry wants to use the default solid shader
#define SHADER_DEFAULT_SOLID -1
// The geometry wants to use the default vertex color shader
#define SHADER_DEFAULT_VERTEX_COLOR -2
// The geometry wants to use the default texture shader
#define SHADER_DEFAULT_TEXTURE -3


// Holds all visual elements related to a single gl context
struct sgsdl2_scene;

// The base type of visual element stored in scene
// Stores a transform representing the location of the object
struct sgsdl2_scene_element;

// A light source
// inherits from scene_element
// At the moment only point lights are supported
struct sgsdl2_light;

// A piece of geometry
// inherits from scene_element
// If any of the GLuint variables are zero, it means
// that no data has been associated with this geometry yet.
struct sgsdl2_geometry;

// A camera
// inherits from scene_element
struct sgsdl2_camera;

// Wrapper for an opengl texture
struct sgsdl2_texture;

// Encapsulates all the properties of a material
struct sgsdl2_material;

// Encapsulates a lot of the functions to do with managing an array texture
// Tracks what levels of the texture are in use.
struct sgsdl2_array_texture;

// Represents a mathematical frustrum
struct sgsdl2_frustrum;



///////////////////////////////////////////
// Enums
///////////////////////////////////////////


// The type of rendering pass to perform
//enum class sgsdl2_render_mode
//{
//	DEPTH_ONLY,
//	FULL
//};


// Represents the available types of scene_elements
	enum class sgsdl2_scene_element_type
	{
		LIGHT,
		GEOMETRY,
		CAMERA
	};

	// The type of light
	enum class sgsdl2_light_type : int
	{
		POINT 		= 1,	// Constant lighting in all directions
		DIRECTIONAL	= 2,	// Uses an orthogonal matrix to calculate directions
		SPOT		= 3 	// Similar to point but light comes out in a cone
	};
	
	// The type of matrix that a camera uses
	enum class sgsdl2_camera_type
	{
		ORTHOGONAL,
		PERSPECTIVE
	};
	
	// What method is used to render a piece of geometry
	enum class sgsdl2_render_type
	{
		SOLID_COLOR,
		VERTEX_COLORS,
		TEXTURE
	};
	
	
	// Type of shadows generated by lights
	enum class sgsdl2_shadowing_type
	{
		NONE,
		STATIC,
		DYNAMIC
	};



///////////////////////////////////////////
// Implementation
///////////////////////////////////////////


	struct sgsdl2_texture
	{
		// Handle for the texture
		GLuint handle;
		
		int width;
		int height;
	};
	
	
	struct sgsdl2_material
	{
		// The shader to use with this material
		int shader;
		
		sg_color diffuse_color;
		sg_color specular_color;
		float specular_exponent;
		float specular_intensity;
		GLuint texture;
	};
	
	struct sgsdl2_array_texture : public sgsdl2_texture
	{
		// The number of levels in this array texture
		int num_of_levels;
		
		// What levels in the texture are occupied
		bool* occupied_levels;
	};
	
	
	struct sgsdl2_scene
	{
		// The window that this scene is rendering to
		sg_drawing_surface *surface;
		
		// Pointer to the currently active camera
		sgsdl2_camera *active_camera;
		
		// All elements that belong to this scene
		vector<sgsdl2_scene_element*> elements;
		
		// Cached array of all lights in the scene
		vector<sgsdl2_light*> lights;
		
		// The shadow map atlas
		sgsdl2_array_texture shadow_map_array;
		
		// All the shaders used in this scene
		vector<GLuint> shaders;
		
		// Default shaders used for each rendering method
		//	GLuint default_solid_shader;
		//	GLuint default_vertex_color_shader;
		//	GLuint default_texture_shader;
		
		GLuint default_shader;
		GLuint default_shadow_shader;
		
		// The coords of the fustrum used by directional lights
//		float dir_left;
//		float dir_right;
//		float dir_top;
//		float dir_bottom;
//		float dir_near;
//		float dir_far;
		
		// The dimensions of the shadowmaps
		int shadow_map_width;
		int shadow_map_height;
	};
	
	
	struct sgsdl2_scene_element
	{
		// Transform vectors
		Vector3f location;
		Vector3f direction;
		Vector3f up;
		
		// Cached transform matrix
		Matrix4f transformMatrix;
		bool transformIsValid;
		
		// The parent is the element that this element is attached to
		sgsdl2_scene_element *parent;
		// Elements that are attached to this element
		vector<sgsdl2_scene_element*> children;
		// Short cut pointer to the root scene
		sgsdl2_scene *root;
		
		// The subtype of this element (camera, geometry, light)
		sgsdl2_scene_element_type type;
	};
	
	
	struct sgsdl2_light : public sgsdl2_scene_element
	{
		// Whether the light is currently active
		bool active;
		
		// Color of the light
		Vector3f color;
		
		// How powerful the light is
		float intensity;
		
		// How quickly the light drops off with distance
		// (however will always follow inverse square law)
		float attenuation;
		
		// How much of this light is ambient
		float ambient_coefficient;
		
		// The cos of the angle of the inner cone formed when the light type is SPOT
		float cos_inner_cone;
		float cos_outer_cone;
		
		// The width of the area that is coated with light. Used for orthogonal lights
		float width;
		float height;
		
		// The furthest distance that the light will travel
		// Used when calculating the shadow map and transform
		float cutoff;
		
		// The radius of the physical light body. Must be greater than zero.
		float radius;
		
		// The type of light
		sgsdl2_light_type light_type;
		
		// Type of shadows the light casts
		sgsdl2_shadowing_type shadow_type;
		
		// Layer of the shadow map atlas that holds this current shadow map
		__attribute__((deprecated))
		GLuint shadow_map;

		// Level of the shadow map in the array texture
		int shadow_map_level;
		
		// True when the shadow map needs to be rerendered (has no effect if the light is dynamic)
		bool shadow_map_needs_rerender;
		
		// True when the shadow map needs to be reallocated (ie, when its size changes) (no longer used)
		__attribute__((deprecated))
		bool shadow_map_needs_reallocation;
		
		// Shadow map texture dimensions
		__attribute__((deprecated))
		int shadow_map_width;
		__attribute__((deprecated))
		int shadow_map_height;
	};
	
	
	struct sgsdl2_geometry : public sgsdl2_scene_element
	{
		// The vao associated with this geometry
		GLuint vao;
		
		// Each of the vertex buffers.
		// Attributes
		GLuint vertex_buffer;
		GLuint normal_buffer;
		GLuint color_buffer;
		GLuint texcoords_buffer;
		GLuint indices_buffer;
		
		// Only the length of indices is needed during rendering
		GLint num_of_indices;
		
		// Uniforms
		//	sg_color color;
		//	sgsdl2_texture *texture;
		
		// The shader to use with this object
		//	int shader;
		
		// An override that will force the piece of geometry to be rendered in a solid color
		bool render_solid_color;
		
		// The material
		sgsdl2_material *material;
	};
	
	
	struct sgsdl2_camera : public sgsdl2_scene_element
	{
		// Type of camera projection
		sgsdl2_camera_type camera_type;
		
		// How wide the view of the camera is in radians
		// (used for perspective camera types)
		__attribute__((deprecated))
		float field_of_view;
		
		// The ratio of the width of the view to the height
		// (used for perspective camera types)
		__attribute__((deprecated))
		float aspect_ratio;
		
		// The near and far clipping distances (used for both camera types)
		float near;
		float far;
		
		// The other distances (used for orthogonal camera types)
		float left;
		float right;
		float top;
		float bottom;
		
		// Whether or no this camera is currently active
		bool is_main;
		
		// The cached camera transforms (get recalculated once each pass)
		Matrix4f view_trans;
		Matrix4f proj_trans;
	};
	
struct sgsdl2_render_profile
{
	// Whether shaders are provided with a material
	bool use_material;
	
	// Whether shaders are provided with lighting data
	bool use_lights;
	
	// Overrides all other shaders when this value is not 0
	GLuint shader_override;
	
	// The framebuffer to use for rendering (leave at 0 to use the default)
	GLuint framebuffer;
	
	// Whether to render the color buffer
	bool render_color_buffer;
	
	// The active camera
	sgsdl2_camera* camera;
	
	// The aspect ratio of the output
	float aspect_ratio;
};
		
struct sgsdl2_frustrum
{
	// Boundaries
	float left, right, top, bottom, near, far;
	bool isOrthogonal;
};


#endif
